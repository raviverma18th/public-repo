<?php
/**
 * RegisterUser GraphQL Resolver
 * 
 * @category  Eighteentech
 * @package   Eighteentech_VirtualFoot
 */

namespace Eighteentech\VirtualFoot\GraphQl\Model\Resolver;

use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\GraphQl\Config\Element\Field;
use Magento\Framework\GraphQl\Schema\Type\ResolveInfo;
use Magento\GraphQl\Model\Query\ResolverInterface;
use Magento\Framework\HTTP\Client\Curl;
use Psr\Log\LoggerInterface;
use Eighteentech\VirtualFoot\Model\Config;
use Magento\Customer\Api\CustomerRepositoryInterface;
use Magento\Framework\Stdlib\DateTime\DateTime;

class RegisterUser implements ResolverInterface
{
    /**
     * @var Curl
     */
    protected $curl;

    /**
     * @var LoggerInterface
     */
    protected $logger;

    /**
     * @var Config
     */
    protected $config;

    /**
     * @var CustomerRepositoryInterface
     */
    protected $customerRepository;

    /**
     * @var DateTime
     */
    protected $dateTime;

    /**
     * Constructor
     *
     * @param Curl $curl
     * @param LoggerInterface $logger
     * @param Config $config
     * @param CustomerRepositoryInterface $customerRepository
     * @param DateTime $dateTime
     */
    public function __construct(
        Curl $curl,
        LoggerInterface $logger,
        Config $config,
        CustomerRepositoryInterface $customerRepository,
        DateTime $dateTime
    ) {
        $this->curl = $curl;
        $this->logger = $logger;
        $this->config = $config;
        $this->customerRepository = $customerRepository;
        $this->dateTime = $dateTime;
    }

    /**
     * Resolve GraphQL query
     *
     * @param Field $field
     * @param mixed $context
     * @param ResolveInfo $info
     * @param array|null $value
     * @param array|null $args
     * @return array
     */
    public function resolve(
        Field $field,
        $context,
        ResolveInfo $info,
        array $value = null,
        array $args = null
    ) {
        $customerId = $context->getUserId();
        $customer = $this->customerRepository->getById($customerId);

        $userToken = $customer->getCustomAttribute('user_token') ? $customer->getCustomAttribute('user_token')->getValue() : null;
        $tokenExpiry = $customer->getCustomAttribute('token_expiry') ? $customer->getCustomAttribute('token_expiry')->getValue() : null;
        $currentTime = $this->dateTime->gmtDate();

        if (!$userToken || !$tokenExpiry || $currentTime >= $tokenExpiry) {
            $newTokenData = $this->generateUserToken($customer);
            $customer->setCustomAttribute('user_token', $newTokenData['token']);
            $customer->setCustomAttribute('token_expiry', $newTokenData['expiry']);
            $this->customerRepository->save($customer);
            $userToken = $newTokenData['token'];
        }

        $scannerUrl = $this->config->getGeneralConfig('scanner_url') . '/' . $userToken . '?lang=en';
        return ['status' => 'SUCCESS', 'message' => 'User registered successfully.', 'scanner_url' => $scannerUrl];
    }

    /**
     * Generate a new user token from the user registration API
     *
     * @param \Magento\Customer\Api\Data\CustomerInterface $customer
     * @return array
     */
    private function generateUserToken($customer)
    {
        $payload = [
            "uuid" => $customer->getId(),
            "region" => $this->config->getGeneralConfig('region'),
            "country" => $this->config->getGeneralConfig('country'),
            "site" => $this->config->getGeneralConfig('site'),
            "gender" => $customer->getCustomAttribute('gender') ? $customer->getCustomAttribute('gender')->getValue() : '',
            "name" => $customer->getFirstname() . ' ' . $customer->getLastname(),
            "birthday" => $customer->getDob()
        ];

        $registrationUrl = $this->config->getUsersConfig('registration_url');
        $apiToken = $this->config->getAuthenticationsConfig('autogenerated_token');
        $xApiKey = $this->config->getUsersConfig('user_x_api_key');

        $headers = [
            'Content-Type' => 'application/json',
            'x-api-key' => $xApiKey,
            'Authorization' => 'Bearer ' . $apiToken
        ];

        $this->curl->setHeaders($headers);
        $this->curl->post($registrationUrl, json_encode($payload));
        $response = json_decode($this->curl->getBody(), true);

        if (isset($response['data']['token']) && isset($response['data']['expired'])) {
            $expiry = $this->dateTime->gmtDate(null, strtotime($response['data']['expired']));
            return ['token' => $response['data']['token'], 'expiry' => $expiry];
        } else {
            $this->logger->error('Failed to generate user token.');
            throw new \Exception('Failed to generate user token.');
        }
    }
}